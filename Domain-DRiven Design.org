#+Title:Domain-Driven Design
#+STARTUP: overview
#+STARTUP: content
#+STARTUP: showall
#+STARTUP: showeverything


* 동작하는 도메인 만들기
  도메인(domain): 사용자가 사용하는 프로그램을 사용하는 영역
  도메인 모델: 도메인 지식을 엄격하게 구성하고 선택적으로 추상화 하는 것 
  
  - 도메인 주도 설계에서 모델의 유용성
    1. 모델과 핵심 설계는 서로 영향을 주며 구체화 된다.
       모델을 의미 있게 만들고 모델의 분석이 최종 산출물인 동작하는 프로그램에 적용 되게끔 보장하는 것이 다름 아닌 모델과 구현간의 긴밀한 연결이다. 이러한 모델과 구현의 연결은 유지보수와 계속되는 기능 개선에도 도움이 되는데 그 이유는 바로 모델을 이해한 바에 근거해 코드를 해석할 수 있기 때문이다. 
    2. 모델은 모든 팀 구성원이 사용하는 언어의 중추다.
       모델과 구현이 서로 연결되 있으므로 개발자는 이 언어를 토대로 프로그램에 관해 의견을 나눌 수 있다. 그러므로 개발자와 도메인 전문가가 의샅소통하는데 별도의 번역 절차가 필요하지 않다. 
    3. 모델은 지식의 정수만을 뽑아낸 것이다. 
       모델은 도메인 지식을 조직화 하고 가장 주요한 요소를 구분하는 팀의 합의된 방식이다. 모델에는 우리가 용어를 선택하고 개념을 분류하며 분류한 지식을 서로 연관시킬 때 도메인에 관한 우리의 사고방식이 담겨 있다. 개발자와 도메인 전문가는 공유 언어를 바탕으로 갖가지 정보를 모델로 만들어 낼때 효과적으로 협업 할 수 있다.  모델과 구현이 연결돼 있다면 초기 버전의 소프트웨어를 통해 얻은 경험을 모델링 프로세스에 피드백으로 활용할 수 있다. 
    
  - 소프트웨어의 본질
    소프트웨어의 본질은 해당 소프트웨어의 사용자를 위해 도메인에 관련된 문제를 해결하는 능력에 있다.
    그 나머지는 부수적인 요소에 불과하다. 

** 지식탐구
